{
  "typescript": {
    "name": "TypeScript",
    "description": "JavaScript 的超集，提供静态类型检查",
    "configFile": "tsconfig.json",
    "essentials": [
      "设置 compilerOptions.target 为 ESNext 或 ES2020",
      "启用 strict 模式获得最佳类型检查",
      "配置 module 为 ESNext（配合 Vite）或 CommonJS",
      "设置 moduleResolution 为 bundler 或 node",
      "配置路径别名 paths"
    ],
    "dependencies": {
      "typescript": "^5.3.0"
    },
    "bestPractices": [
      "为所有函数参数和返回值添加类型",
      "使用接口(interface)定义数据结构",
      "启用严格模式获得最佳类型安全",
      "合理使用泛型提高代码复用性"
    ]
  },
  "tailwind": {
    "name": "Tailwind CSS",
    "description": "实用优先的 CSS 框架",
    "configFiles": {
      "tailwind.config.js": "Tailwind 配置文件",
      "postcss.config.js": "PostCSS 配置文件"
    },
    "essentials": [
      "在 tailwind.config.js 中配置 content 扫描路径",
      "在主 CSS 文件中引入 @tailwind 指令",
      "配置 PostCSS 插件"
    ],
    "dependencies": {
      "tailwindcss": "^3.4.0",
      "postcss": "^8.4.0",
      "autoprefixer": "^10.4.0"
    },
    "files": {
      "src/index.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;"
    },
    "bestPractices": [
      "使用实用类而非自定义 CSS",
      "通过 @apply 指令复用样式组合",
      "配置主题扩展自定义设计系统",
      "使用 JIT 模式获得最佳性能"
    ]
  },
  "eslint": {
    "name": "ESLint",
    "description": "JavaScript/TypeScript 代码质量检查工具",
    "configFile": ".eslintrc.json",
    "essentials": [
      "根据框架选择对应的 extends 配置",
      "配置 parser 为 @typescript-eslint/parser（TypeScript 项目）",
      "设置 rules 自定义规则",
      "配置 ignorePatterns 忽略文件"
    ],
    "dependencies": {
      "eslint": "^8.56.0"
    },
    "frameworkSpecific": {
      "vue": {
        "extends": ["plugin:vue/vue3-recommended"],
        "dependencies": ["eslint-plugin-vue"]
      },
      "react": {
        "extends": ["plugin:react/recommended", "plugin:react-hooks/recommended"],
        "dependencies": ["eslint-plugin-react", "eslint-plugin-react-hooks"]
      }
    }
  },
  "prettier": {
    "name": "Prettier",
    "description": "代码格式化工具",
    "configFile": ".prettierrc",
    "essentials": [
      "配置 semi（分号）规则",
      "设置 singleQuote（单引号）偏好",
      "配置 tabWidth 和 useTabs",
      "设置 trailingComma（尾随逗号）规则"
    ],
    "dependencies": {
      "prettier": "^3.2.0"
    },
    "recommendedConfig": {
      "semi": false,
      "singleQuote": true,
      "tabWidth": 2,
      "trailingComma": "es5",
      "printWidth": 100
    }
  },
  "vue-router": {
    "name": "Vue Router",
    "description": "Vue.js 官方路由管理器",
    "version": "4.x",
    "structure": {
      "src/router/index.ts": "路由配置文件"
    },
    "dependencies": {
      "vue-router": "^4.2.0"
    },
    "essentials": [
      "使用 createRouter 和 createWebHistory 创建路由实例",
      "定义路由数组，包含 path、name、component",
      "在 main.ts 中通过 app.use(router) 注册",
      "使用 <router-view> 组件渲染匹配的组件"
    ],
    "bestPractices": [
      "使用路由懒加载优化性能",
      "定义路由元信息 meta 字段",
      "实现路由守卫进行权限控制"
    ]
  },
  "pinia": {
    "name": "Pinia",
    "description": "Vue 3 官方推荐的状态管理库",
    "structure": {
      "src/stores/": "状态管理模块目录"
    },
    "dependencies": {
      "pinia": "^2.1.0"
    },
    "essentials": [
      "使用 createPinia() 创建 Pinia 实例",
      "在 main.ts 中通过 app.use(pinia) 注册",
      "使用 defineStore 定义 store",
      "支持 Options API 和 Composition API 风格"
    ],
    "bestPractices": [
      "按功能模块拆分 store",
      "使用 Composition API 风格获得更好的类型推导",
      "合理使用 getters 计算派生状态"
    ]
  },
  "element-plus": {
    "name": "Element Plus",
    "description": "Vue 3 组件库",
    "dependencies": {
      "element-plus": "^2.5.0"
    },
    "essentials": [
      "全局引入或按需引入组件",
      "导入样式文件",
      "配置国际化（可选）"
    ],
    "recommendedSetup": "按需引入（配合 unplugin-vue-components 和 unplugin-auto-import）"
  },
  "antd": {
    "name": "Ant Design",
    "description": "React 组件库",
    "dependencies": {
      "antd": "^5.12.0"
    },
    "essentials": [
      "按需引入组件",
      "配置主题定制（可选）",
      "导入样式"
    ],
    "recommendedSetup": "使用 CSS-in-JS 方案，无需额外配置"
  }
}
