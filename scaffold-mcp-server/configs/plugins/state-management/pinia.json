{
  "metadata": {
    "name": "pinia",
    "version": "1.0.0",
    "description": "Pinia Vue 3状态管理库插件，轻量级且类型安全",
    "author": "Scaffold Generator",
    "homepage": "https://pinia.vuejs.org/",
    "keywords": ["pinia", "vue3", "state-management", "store"],
    "category": "state-management"
  },
  "activation": {
    "techStack": {
      "framework": ["vue3", "vue"],
      "stateManagement": ["pinia"]
    },
    "stateManagement": ["pinia"]
  },
  "dependencies": [
    {
      "name": "pinia",
      "version": "^2.1.7",
      "type": "dependencies"
    },
    {
      "name": "@pinia/nuxt",
      "version": "^0.5.1",
      "type": "dependencies",
      "condition": "context.techStack.framework?.includes('nuxt')"
    },
    {
      "name": "pinia-plugin-persistedstate",
      "version": "^3.2.1",
      "type": "dependencies",
      "condition": "context.extraTools?.includes('persistence')"
    }
  ],
  "scripts": [],
  "files": [
    {
      "path": "src/stores/index.ts",
      "content": "import { createPinia } from 'pinia';\n{{#if (includes extraTools 'persistence')}}\nimport { createPersistedState } from 'pinia-plugin-persistedstate';\n{{/if}}\n\nconst pinia = createPinia();\n\n{{#if (includes extraTools 'persistence')}}\n// 添加持久化插件\npinia.use(createPersistedState({\n  storage: localStorage,\n  serializer: {\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n  },\n}));\n{{/if}}\n\nexport default pinia;\n\n// 导出所有 stores\nexport * from './user';\nexport * from './app';\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/index.ts')"
    },
    {
      "path": "src/stores/index.js",
      "content": "import { createPinia } from 'pinia';\n{{#if (includes extraTools 'persistence')}}\nimport { createPersistedState } from 'pinia-plugin-persistedstate';\n{{/if}}\n\nconst pinia = createPinia();\n\n{{#if (includes extraTools 'persistence')}}\n// 添加持久化插件\npinia.use(createPersistedState({\n  storage: localStorage,\n  serializer: {\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n  },\n}));\n{{/if}}\n\nexport default pinia;\n\n// 导出所有 stores\nexport * from './user';\nexport * from './app';\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/index.js')"
    },
    {
      "path": "src/stores/user.ts",
      "content": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\ninterface UserState {\n  currentUser: User | null;\n  isLoggedIn: boolean;\n  token: string | null;\n}\n\nexport const useUserStore = defineStore('user', () => {\n  // State\n  const currentUser = ref<User | null>(null);\n  const token = ref<string | null>(null);\n\n  // Getters\n  const isLoggedIn = computed(() => !!token.value && !!currentUser.value);\n  const userName = computed(() => currentUser.value?.name || '游客');\n  const userAvatar = computed(() => currentUser.value?.avatar || '');\n\n  // Actions\n  const login = async (credentials: { email: string; password: string }) => {\n    try {\n      // 模拟登录 API 调用\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        token.value = data.token;\n        currentUser.value = data.user;\n        return { success: true };\n      } else {\n        throw new Error(data.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const logout = () => {\n    currentUser.value = null;\n    token.value = null;\n  };\n\n  const updateProfile = (updates: Partial<User>) => {\n    if (currentUser.value) {\n      currentUser.value = { ...currentUser.value, ...updates };\n    }\n  };\n\n  return {\n    // State\n    currentUser,\n    token,\n    // Getters\n    isLoggedIn,\n    userName,\n    userAvatar,\n    // Actions\n    login,\n    logout,\n    updateProfile,\n  };\n}{{#if (includes extraTools 'persistence')}}, {\n  persist: {\n    key: 'user-store',\n    storage: localStorage,\n    paths: ['currentUser', 'token'],\n  },\n}{{/if}});\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/user.ts')"
    },
    {
      "path": "src/stores/user.js",
      "content": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\nexport const useUserStore = defineStore('user', () => {\n  // State\n  const currentUser = ref(null);\n  const token = ref(null);\n\n  // Getters\n  const isLoggedIn = computed(() => !!token.value && !!currentUser.value);\n  const userName = computed(() => currentUser.value?.name || '游客');\n  const userAvatar = computed(() => currentUser.value?.avatar || '');\n\n  // Actions\n  const login = async (credentials) => {\n    try {\n      // 模拟登录 API 调用\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        token.value = data.token;\n        currentUser.value = data.user;\n        return { success: true };\n      } else {\n        throw new Error(data.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const logout = () => {\n    currentUser.value = null;\n    token.value = null;\n  };\n\n  const updateProfile = (updates) => {\n    if (currentUser.value) {\n      currentUser.value = { ...currentUser.value, ...updates };\n    }\n  };\n\n  return {\n    // State\n    currentUser,\n    token,\n    // Getters\n    isLoggedIn,\n    userName,\n    userAvatar,\n    // Actions\n    login,\n    logout,\n    updateProfile,\n  };\n}{{#if (includes extraTools 'persistence')}}, {\n  persist: {\n    key: 'user-store',\n    storage: localStorage,\n    paths: ['currentUser', 'token'],\n  },\n}{{/if}});\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/user.js')"
    },
    {
      "path": "src/stores/app.ts",
      "content": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\ntype Theme = 'light' | 'dark' | 'auto';\ntype Language = 'zh-CN' | 'en-US';\n\ninterface AppState {\n  theme: Theme;\n  language: Language;\n  sidebarCollapsed: boolean;\n  loading: boolean;\n}\n\nexport const useAppStore = defineStore('app', () => {\n  // State\n  const theme = ref<Theme>('light');\n  const language = ref<Language>('zh-CN');\n  const sidebarCollapsed = ref(false);\n  const loading = ref(false);\n\n  // Getters\n  const isDarkMode = computed(() => {\n    if (theme.value === 'auto') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return theme.value === 'dark';\n  });\n\n  const isZhCN = computed(() => language.value === 'zh-CN');\n\n  // Actions\n  const setTheme = (newTheme: Theme) => {\n    theme.value = newTheme;\n    // 应用主题到 document\n    document.documentElement.setAttribute('data-theme', newTheme);\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme.value === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n\n  const setLanguage = (newLanguage: Language) => {\n    language.value = newLanguage;\n    // 应用语言到 document\n    document.documentElement.setAttribute('lang', newLanguage);\n  };\n\n  const toggleSidebar = () => {\n    sidebarCollapsed.value = !sidebarCollapsed.value;\n  };\n\n  const setLoading = (isLoading: boolean) => {\n    loading.value = isLoading;\n  };\n\n  // 初始化应用设置\n  const initializeApp = () => {\n    setTheme(theme.value);\n    setLanguage(language.value);\n  };\n\n  return {\n    // State\n    theme,\n    language,\n    sidebarCollapsed,\n    loading,\n    // Getters\n    isDarkMode,\n    isZhCN,\n    // Actions\n    setTheme,\n    toggleTheme,\n    setLanguage,\n    toggleSidebar,\n    setLoading,\n    initializeApp,\n  };\n}{{#if (includes extraTools 'persistence')}}, {\n  persist: {\n    key: 'app-store',\n    storage: localStorage,\n    paths: ['theme', 'language', 'sidebarCollapsed'],\n  },\n}{{/if}});\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/app.ts')"
    },
    {
      "path": "src/stores/app.js",
      "content": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\n\nexport const useAppStore = defineStore('app', () => {\n  // State\n  const theme = ref('light');\n  const language = ref('zh-CN');\n  const sidebarCollapsed = ref(false);\n  const loading = ref(false);\n\n  // Getters\n  const isDarkMode = computed(() => {\n    if (theme.value === 'auto') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return theme.value === 'dark';\n  });\n\n  const isZhCN = computed(() => language.value === 'zh-CN');\n\n  // Actions\n  const setTheme = (newTheme) => {\n    theme.value = newTheme;\n    // 应用主题到 document\n    document.documentElement.setAttribute('data-theme', newTheme);\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme.value === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n\n  const setLanguage = (newLanguage) => {\n    language.value = newLanguage;\n    // 应用语言到 document\n    document.documentElement.setAttribute('lang', newLanguage);\n  };\n\n  const toggleSidebar = () => {\n    sidebarCollapsed.value = !sidebarCollapsed.value;\n  };\n\n  const setLoading = (isLoading) => {\n    loading.value = isLoading;\n  };\n\n  // 初始化应用设置\n  const initializeApp = () => {\n    setTheme(theme.value);\n    setLanguage(language.value);\n  };\n\n  return {\n    // State\n    theme,\n    language,\n    sidebarCollapsed,\n    loading,\n    // Getters\n    isDarkMode,\n    isZhCN,\n    // Actions\n    setTheme,\n    toggleTheme,\n    setLanguage,\n    toggleSidebar,\n    setLoading,\n    initializeApp,\n  };\n}{{#if (includes extraTools 'persistence')}}, {\n  persist: {\n    key: 'app-store',\n    storage: localStorage,\n    paths: ['theme', 'language', 'sidebarCollapsed'],\n  },\n}{{/if}});\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/stores/app.js')"
    }
  ],
  "integration": {
    "vue": {
      "plugins": [
        {
          "name": "pinia",
          "config": "app.use(pinia)",
          "import": "import pinia from '@/stores';"
        }
      ]
    },
    "typescript": {
      "compilerOptions": {
        "types": ["pinia"]
      }
    }
  },
  "defaultConfig": {
    "pinia": {
      "devtools": true,
      "hotReload": true
    }
  },
  "hooks": {
    "afterActivation": "console.log('Pinia plugin activated successfully')"
  }
}