{
  "metadata": {
    "name": "umijs",
    "version": "1.0.0",
    "description": "UmiJS企业级React应用框架插件，提供完整的开发解决方案",
    "author": "Scaffold Generator",
    "homepage": "https://umijs.org/",
    "keywords": ["umijs", "react", "framework", "enterprise"],
    "category": "framework"
  },
  "activation": {
    "techStack": {
      "framework": ["umijs", "umi"]
    }
  },
  "dependencies": [
    {
      "name": "umi",
      "version": "^4.0.87",
      "type": "dependencies"
    },
    {
      "name": "@umijs/lint",
      "version": "^4.0.87",
      "type": "devDependencies"
    },
    {
      "name": "@umijs/plugins",
      "version": "^4.0.87",
      "type": "devDependencies"
    },
    {
      "name": "@types/react",
      "version": "^18.2.37",
      "type": "devDependencies",
      "condition": "context.techStack.language?.includes('typescript')"
    },
    {
      "name": "@types/react-dom",
      "version": "^18.2.15",
      "type": "devDependencies",
      "condition": "context.techStack.language?.includes('typescript')"
    },
    {
      "name": "react",
      "version": "^18.2.0",
      "type": "dependencies"
    },
    {
      "name": "react-dom",
      "version": "^18.2.0",
      "type": "dependencies"
    },
    {
      "name": "antd",
      "version": "^5.12.8",
      "type": "dependencies",
      "condition": "context.extraTools?.includes('antd') || context.userConfig?.ui === 'antd'"
    },
    {
      "name": "@ant-design/pro-components",
      "version": "^2.6.48",
      "type": "dependencies",
      "condition": "context.extraTools?.includes('antd-pro') || context.userConfig?.ui === 'antd-pro'"
    }
  ],
  "scripts": [
    {
      "name": "dev",
      "command": "umi dev",
      "description": "启动开发服务器"
    },
    {
      "name": "build",
      "command": "umi build",
      "description": "构建生产版本"
    },
    {
      "name": "preview",
      "command": "umi preview",
      "description": "预览生产构建"
    },
    {
      "name": "setup",
      "command": "umi setup",
      "description": "初始化项目"
    },
    {
      "name": "lint",
      "command": "umi lint",
      "description": "代码检查"
    },
    {
      "name": "lint:fix",
      "command": "umi lint --fix",
      "description": "自动修复代码问题"
    },
    {
      "name": "type-check",
      "command": "umi type-check",
      "description": "TypeScript类型检查",
      "condition": "context.techStack.language?.includes('typescript')"
    }
  ],
  "files": [
    {
      "path": ".umirc.ts",
      "content": "import { defineConfig } from 'umi';\n\nexport default defineConfig({\n  title: '{{projectName}}',\n  favicon: '/favicon.ico',\n  hash: true,\n  history: {\n    type: 'browser'\n  },\n  routes: [\n    {\n      path: '/',\n      component: '@/pages/index'\n    }\n  ],\n  npmClient: 'pnpm',\n{{#if (includes extraTools 'antd')}}\n  antd: {\n    // antd 插件配置\n    dark: false,\n    compact: false\n  },\n{{/if}}\n{{#if (includes extraTools 'antd-pro')}}\n  access: {},\n  model: {},\n  initialState: {},\n  request: {},\n  layout: {\n    name: '{{projectName}}',\n    locale: true,\n    layout: 'mix'\n  },\n{{/if}}\n  plugins: [\n{{#if (includes extraTools 'antd')}}\n    '@umijs/plugins/dist/antd',\n{{/if}}\n{{#if (includes extraTools 'antd-pro')}}\n    '@umijs/plugins/dist/access',\n    '@umijs/plugins/dist/model',\n    '@umijs/plugins/dist/initial-state',\n    '@umijs/plugins/dist/request',\n    '@umijs/plugins/dist/layout',\n{{/if}}\n    '@umijs/plugins/dist/styled-components'\n  ],\n  proxy: {\n    '/api': {\n      target: 'http://localhost:8000',\n      changeOrigin: true,\n      pathRewrite: { '^/api': '' }\n    }\n  },\n  define: {\n    'process.env.NODE_ENV': process.env.NODE_ENV\n  },\n  externals: {\n    // 外部依赖配置\n  },\n  chainWebpack(config: any) {\n    // webpack 配置修改\n  }\n});\n",
      "encoding": "utf8",
      "condition": "!context.hasFile('.umirc.ts') && !context.hasFile('.umirc.js')"
    },
    {
      "path": "src/pages/index.tsx",
      "content": "import React from 'react';\n{{#if (includes extraTools 'antd')}}\nimport { Button, Typography } from 'antd';\n\nconst { Title, Paragraph } = Typography;\n{{/if}}\n\nconst HomePage: React.FC = () => {\n  return (\n    <div style={{ padding: '24px' }}>\n{{#if (includes extraTools 'antd')}}\n      <Title>欢迎使用 {{projectName}}</Title>\n      <Paragraph>\n        这是一个基于 UmiJS 和 Ant Design 构建的应用。\n      </Paragraph>\n      <Button type=\"primary\" size=\"large\">\n        开始使用\n      </Button>\n{{else}}\n      <h1>欢迎使用 {{projectName}}</h1>\n      <p>这是一个基于 UmiJS 构建的应用。</p>\n      <button>开始使用</button>\n{{/if}}\n    </div>\n  );\n};\n\nexport default HomePage;\n",
      "encoding": "utf8",
      "condition": "!context.hasFile('src/pages/index.tsx') && context.techStack.language?.includes('typescript')"
    },
    {
      "path": "src/pages/index.jsx",
      "content": "import React from 'react';\n{{#if (includes extraTools 'antd')}}\nimport { Button, Typography } from 'antd';\n\nconst { Title, Paragraph } = Typography;\n{{/if}}\n\nconst HomePage = () => {\n  return (\n    <div style={{ padding: '24px' }}>\n{{#if (includes extraTools 'antd')}}\n      <Title>欢迎使用 {{projectName}}</Title>\n      <Paragraph>\n        这是一个基于 UmiJS 和 Ant Design 构建的应用。\n      </Paragraph>\n      <Button type=\"primary\" size=\"large\">\n        开始使用\n      </Button>\n{{else}}\n      <h1>欢迎使用 {{projectName}}</h1>\n      <p>这是一个基于 UmiJS 构建的应用。</p>\n      <button>开始使用</button>\n{{/if}}\n    </div>\n  );\n};\n\nexport default HomePage;\n",
      "encoding": "utf8",
      "condition": "!context.hasFile('src/pages/index.jsx') && !context.techStack.language?.includes('typescript')"
    },
    {
      "path": "src/app.ts",
      "content": "import type { RequestConfig } from 'umi';\n\n// 全局初始状态\nexport async function getInitialState(): Promise<{\n  name: string;\n}> {\n  return {\n    name: '{{projectName}}'\n  };\n}\n\n// 请求配置\nexport const request: RequestConfig = {\n  timeout: 10000,\n  errorConfig: {\n    errorThrower: (res) => {\n      const { success, data, errorCode, errorMessage, showType } = res;\n      if (!success) {\n        const error: any = new Error(errorMessage);\n        error.name = 'BizError';\n        error.info = { errorCode, errorMessage, showType, data };\n        throw error;\n      }\n    },\n    errorHandler: (error: any, opts: any) => {\n      if (opts?.skipErrorHandler) throw error;\n      console.error('Request error:', error);\n    }\n  },\n  requestInterceptors: [\n    (config) => {\n      // 请求拦截器\n      return config;\n    }\n  ],\n  responseInterceptors: [\n    (response) => {\n      // 响应拦截器\n      return response;\n    }\n  ]\n};\n",
      "encoding": "utf8",
      "condition": "context.extraTools?.includes('antd-pro') && context.techStack.language?.includes('typescript') && !context.hasFile('src/app.ts')"
    },
    {
      "path": "typings.d.ts",
      "content": "declare module '*.css';\ndeclare module '*.less';\ndeclare module '*.scss';\ndeclare module '*.sass';\ndeclare module '*.svg';\ndeclare module '*.png';\ndeclare module '*.jpg';\ndeclare module '*.jpeg';\ndeclare module '*.gif';\ndeclare module '*.bmp';\ndeclare module '*.tiff';\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('typings.d.ts')"
    },
    {
      "path": "public/favicon.ico",
      "content": "",
      "encoding": "utf8",
      "condition": "!context.hasFile('public/favicon.ico')"
    }
  ],
  "integration": {
    "typescript": {
      "compilerOptions": {
        "target": "ES2020",
        "lib": ["DOM", "DOM.Iterable", "ES6"],
        "allowJs": true,
        "skipLibCheck": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        "baseUrl": "./",
        "paths": {
          "@/*": ["src/*"]
        }
      },
      "include": [
        "src",
        "typings.d.ts"
      ]
    },
    "eslint": {
      "extends": [
        "@umijs/lint/dist/config/eslint"
      ]
    },
    "prettier": {
      "extends": "@umijs/lint/dist/config/prettier"
    }
  },
  "defaultConfig": {
    "umi": {
      "outputPath": "dist",
      "publicPath": "/",
      "hash": true,
      "targets": {
        "chrome": 80
      }
    }
  },
  "hooks": {
    "afterActivation": "console.log('UmiJS plugin activated successfully')"
  }
}