{
  "metadata": {
    "name": "vitest",
    "version": "1.0.0",
    "description": "Vitest testing framework configuration",
    "author": "Scaffold MCP Server",
    "homepage": "https://vitest.dev/",
    "category": "testing",
    "keywords": ["vitest", "testing", "unit-test", "vite"]
  },
  "activation": {
    "techStack": {
      "testing": ["vitest"],
      "buildTool": ["vite"]
    },
    "custom": "userConfig.testFramework === 'vitest'"
  },
  "dependencies": [
    {
      "name": "vitest",
      "version": "^1.2.0",
      "type": "devDependencies"
    },
    {
      "name": "@vitest/ui",
      "version": "^1.2.0",
      "type": "devDependencies",
      "condition": {
        "techStack": {
          "features": ["test-ui"]
        }
      }
    },
    {
      "name": "@vue/test-utils",
      "version": "^2.4.0",
      "type": "devDependencies",
      "condition": {
        "techStack": {
          "framework": ["vue3"]
        }
      }
    },
    {
      "name": "@testing-library/react",
      "version": "^14.0.0",
      "type": "devDependencies",
      "condition": {
        "techStack": {
          "framework": ["react"]
        }
      }
    },
    {
      "name": "@testing-library/jest-dom",
      "version": "^6.2.0",
      "type": "devDependencies"
    },
    {
      "name": "jsdom",
      "version": "^24.0.0",
      "type": "devDependencies"
    }
  ],
  "scripts": [
    {
      "name": "test",
      "command": "vitest",
      "description": "Run tests in watch mode"
    },
    {
      "name": "test:run",
      "command": "vitest run",
      "description": "Run tests once"
    },
    {
      "name": "test:coverage",
      "command": "vitest run --coverage",
      "description": "Run tests with coverage"
    },
    {
      "name": "test:ui",
      "command": "vitest --ui",
      "description": "Run tests with UI",
      "condition": {
        "techStack": {
          "features": ["test-ui"]
        }
      }
    }
  ],
  "files": [
    {
      "path": "vitest.config.ts",
      "content": "import { defineConfig } from 'vitest/config'\nimport { resolve } from 'path'\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: ['./src/test/setup.ts'],\n    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n    exclude: ['node_modules', 'dist', '.idea', '.git', '.cache']\n  },\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src')\n    }\n  }\n})",
      "encoding": "utf8",
      "mergeStrategy": "replace"
    },
    {
      "path": "src/test/setup.ts",
      "content": "import '@testing-library/jest-dom'\n\n// Global test setup\nglobal.ResizeObserver = class ResizeObserver {\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n}\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n})",
      "encoding": "utf8",
      "mergeStrategy": "replace"
    }
  ],
  "integration": {
    "viteConfig": {
      "test": {
        "globals": true,
        "environment": "jsdom"
      }
    }
  }
}