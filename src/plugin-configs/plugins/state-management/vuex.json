{
  "metadata": {
    "name": "vuex",
    "version": "1.0.0",
    "description": "Vuex Vue状态管理库插件，适用于Vue 2和Vue 3",
    "author": "Scaffold Generator",
    "homepage": "https://vuex.vuejs.org/",
    "keywords": ["vuex", "vue", "vue3", "state-management", "store"],
    "category": "state-management"
  },
  "activation": {
    "techStack": {
      "framework": ["vue", "vue3"],
      "stateManagement": ["vuex"]
    },
    "stateManagement": ["vuex"]
  },
  "dependencies": [
    {
      "name": "vuex",
      "version": "^4.1.0",
      "type": "dependencies",
      "condition": "context.techStack.framework?.includes('vue3')"
    },
    {
      "name": "vuex",
      "version": "^3.6.2",
      "type": "dependencies",
      "condition": "context.techStack.framework?.includes('vue') && !context.techStack.framework?.includes('vue3')"
    },
    {
      "name": "vuex-persistedstate",
      "version": "^4.1.0",
      "type": "dependencies",
      "condition": "context.extraTools?.includes('persistence')"
    },
    {
      "name": "vuex-module-decorators",
      "version": "^2.0.0",
      "type": "dependencies",
      "condition": "context.techStack.language?.includes('typescript') && context.extraTools?.includes('decorators')"
    }
  ],
  "scripts": [],
  "files": [
    {
      "path": "src/store/index.ts",
      "content": "import { createStore } from 'vuex';\n{{#if (includes extraTools 'persistence')}}\nimport createPersistedState from 'vuex-persistedstate';\n{{/if}}\nimport user from './modules/user';\nimport app from './modules/app';\n\nexport interface RootState {\n  version: string;\n}\n\nconst store = createStore<RootState>({\n  state: {\n    version: '1.0.0',\n  },\n  modules: {\n    user,\n    app,\n  },\n{{#if (includes extraTools 'persistence')}}\n  plugins: [\n    createPersistedState({\n      storage: window.localStorage,\n      paths: ['user.currentUser', 'user.token', 'app.theme', 'app.language'],\n    }),\n  ],\n{{/if}}\n});\n\nexport default store;\n\n// 导出类型\nexport type Store = typeof store;\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/store/index.ts')"
    },
    {
      "path": "src/store/index.js",
      "content": "import { createStore } from 'vuex';\n{{#if (includes extraTools 'persistence')}}\nimport createPersistedState from 'vuex-persistedstate';\n{{/if}}\nimport user from './modules/user';\nimport app from './modules/app';\n\nconst store = createStore({\n  state: {\n    version: '1.0.0',\n  },\n  modules: {\n    user,\n    app,\n  },\n{{#if (includes extraTools 'persistence')}}\n  plugins: [\n    createPersistedState({\n      storage: window.localStorage,\n      paths: ['user.currentUser', 'user.token', 'app.theme', 'app.language'],\n    }),\n  ],\n{{/if}}\n});\n\nexport default store;\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/store/index.js')"
    },
    {
      "path": "src/store/modules/user.ts",
      "content": "import { Module, ActionTree, MutationTree, GetterTree } from 'vuex';\nimport { RootState } from '../index';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\ninterface UserState {\n  currentUser: User | null;\n  token: string | null;\n  isLoggedIn: boolean;\n}\n\nconst state: UserState = {\n  currentUser: null,\n  token: null,\n  isLoggedIn: false,\n};\n\nconst getters: GetterTree<UserState, RootState> = {\n  isLoggedIn: (state) => !!state.token && !!state.currentUser,\n  userName: (state) => state.currentUser?.name || '游客',\n  userAvatar: (state) => state.currentUser?.avatar || '',\n};\n\nconst mutations: MutationTree<UserState> = {\n  SET_USER(state, user: User) {\n    state.currentUser = user;\n  },\n  SET_TOKEN(state, token: string) {\n    state.token = token;\n  },\n  SET_LOGIN_STATUS(state, status: boolean) {\n    state.isLoggedIn = status;\n  },\n  CLEAR_USER(state) {\n    state.currentUser = null;\n    state.token = null;\n    state.isLoggedIn = false;\n  },\n  UPDATE_USER_PROFILE(state, updates: Partial<User>) {\n    if (state.currentUser) {\n      state.currentUser = { ...state.currentUser, ...updates };\n    }\n  },\n};\n\nconst actions: ActionTree<UserState, RootState> = {\n  async login({ commit }, credentials: { email: string; password: string }) {\n    try {\n      // 模拟登录 API 调用\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        commit('SET_TOKEN', data.token);\n        commit('SET_USER', data.user);\n        commit('SET_LOGIN_STATUS', true);\n        return { success: true };\n      } else {\n        throw new Error(data.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message };\n    }\n  },\n  \n  logout({ commit }) {\n    commit('CLEAR_USER');\n  },\n  \n  updateProfile({ commit }, updates: Partial<User>) {\n    commit('UPDATE_USER_PROFILE', updates);\n  },\n};\n\nconst userModule: Module<UserState, RootState> = {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};\n\nexport default userModule;\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/store/modules/user.ts')"
    },
    {
      "path": "src/store/modules/user.js",
      "content": "const state = {\n  currentUser: null,\n  token: null,\n  isLoggedIn: false,\n};\n\nconst getters = {\n  isLoggedIn: (state) => !!state.token && !!state.currentUser,\n  userName: (state) => state.currentUser?.name || '游客',\n  userAvatar: (state) => state.currentUser?.avatar || '',\n};\n\nconst mutations = {\n  SET_USER(state, user) {\n    state.currentUser = user;\n  },\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_LOGIN_STATUS(state, status) {\n    state.isLoggedIn = status;\n  },\n  CLEAR_USER(state) {\n    state.currentUser = null;\n    state.token = null;\n    state.isLoggedIn = false;\n  },\n  UPDATE_USER_PROFILE(state, updates) {\n    if (state.currentUser) {\n      state.currentUser = { ...state.currentUser, ...updates };\n    }\n  },\n};\n\nconst actions = {\n  async login({ commit }, credentials) {\n    try {\n      // 模拟登录 API 调用\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        commit('SET_TOKEN', data.token);\n        commit('SET_USER', data.user);\n        commit('SET_LOGIN_STATUS', true);\n        return { success: true };\n      } else {\n        throw new Error(data.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message };\n    }\n  },\n  \n  logout({ commit }) {\n    commit('CLEAR_USER');\n  },\n  \n  updateProfile({ commit }, updates) {\n    commit('UPDATE_USER_PROFILE', updates);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/store/modules/user.js')"
    },
    {
      "path": "src/store/modules/app.ts",
      "content": "import { Module, ActionTree, MutationTree, GetterTree } from 'vuex';\nimport { RootState } from '../index';\n\ntype Theme = 'light' | 'dark' | 'auto';\ntype Language = 'zh-CN' | 'en-US';\n\ninterface AppState {\n  theme: Theme;\n  language: Language;\n  sidebarCollapsed: boolean;\n  loading: boolean;\n}\n\nconst state: AppState = {\n  theme: 'light',\n  language: 'zh-CN',\n  sidebarCollapsed: false,\n  loading: false,\n};\n\nconst getters: GetterTree<AppState, RootState> = {\n  isDarkMode: (state) => {\n    if (state.theme === 'auto') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return state.theme === 'dark';\n  },\n  isZhCN: (state) => state.language === 'zh-CN',\n};\n\nconst mutations: MutationTree<AppState> = {\n  SET_THEME(state, theme: Theme) {\n    state.theme = theme;\n    // 应用主题到 document\n    document.documentElement.setAttribute('data-theme', theme);\n  },\n  SET_LANGUAGE(state, language: Language) {\n    state.language = language;\n    // 应用语言到 document\n    document.documentElement.setAttribute('lang', language);\n  },\n  TOGGLE_SIDEBAR(state) {\n    state.sidebarCollapsed = !state.sidebarCollapsed;\n  },\n  SET_LOADING(state, loading: boolean) {\n    state.loading = loading;\n  },\n};\n\nconst actions: ActionTree<AppState, RootState> = {\n  setTheme({ commit }, theme: Theme) {\n    commit('SET_THEME', theme);\n  },\n  \n  toggleTheme({ commit, state }) {\n    const newTheme = state.theme === 'light' ? 'dark' : 'light';\n    commit('SET_THEME', newTheme);\n  },\n  \n  setLanguage({ commit }, language: Language) {\n    commit('SET_LANGUAGE', language);\n  },\n  \n  toggleSidebar({ commit }) {\n    commit('TOGGLE_SIDEBAR');\n  },\n  \n  setLoading({ commit }, loading: boolean) {\n    commit('SET_LOADING', loading);\n  },\n  \n  // 初始化应用设置\n  initializeApp({ commit, state }) {\n    commit('SET_THEME', state.theme);\n    commit('SET_LANGUAGE', state.language);\n  },\n};\n\nconst appModule: Module<AppState, RootState> = {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};\n\nexport default appModule;\n",
      "encoding": "utf8",
      "condition": "context.techStack.language?.includes('typescript') && !context.hasFile('src/store/modules/app.ts')"
    },
    {
      "path": "src/store/modules/app.js",
      "content": "const state = {\n  theme: 'light',\n  language: 'zh-CN',\n  sidebarCollapsed: false,\n  loading: false,\n};\n\nconst getters = {\n  isDarkMode: (state) => {\n    if (state.theme === 'auto') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return state.theme === 'dark';\n  },\n  isZhCN: (state) => state.language === 'zh-CN',\n};\n\nconst mutations = {\n  SET_THEME(state, theme) {\n    state.theme = theme;\n    // 应用主题到 document\n    document.documentElement.setAttribute('data-theme', theme);\n  },\n  SET_LANGUAGE(state, language) {\n    state.language = language;\n    // 应用语言到 document\n    document.documentElement.setAttribute('lang', language);\n  },\n  TOGGLE_SIDEBAR(state) {\n    state.sidebarCollapsed = !state.sidebarCollapsed;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n};\n\nconst actions = {\n  setTheme({ commit }, theme) {\n    commit('SET_THEME', theme);\n  },\n  \n  toggleTheme({ commit, state }) {\n    const newTheme = state.theme === 'light' ? 'dark' : 'light';\n    commit('SET_THEME', newTheme);\n  },\n  \n  setLanguage({ commit }, language) {\n    commit('SET_LANGUAGE', language);\n  },\n  \n  toggleSidebar({ commit }) {\n    commit('TOGGLE_SIDEBAR');\n  },\n  \n  setLoading({ commit }, loading) {\n    commit('SET_LOADING', loading);\n  },\n  \n  // 初始化应用设置\n  initializeApp({ commit, state }) {\n    commit('SET_THEME', state.theme);\n    commit('SET_LANGUAGE', state.language);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};\n",
      "encoding": "utf8",
      "condition": "!context.techStack.language?.includes('typescript') && !context.hasFile('src/store/modules/app.js')"
    }
  ],
  "integration": {
    "vue": {
      "plugins": [
        {
          "name": "store",
          "config": "app.use(store)",
          "import": "import store from '@/store';"
        }
      ]
    },
    "typescript": {
      "compilerOptions": {
        "types": ["vuex"]
      }
    }
  },
  "defaultConfig": {
    "vuex": {
      "strict": true,
      "devtools": true
    }
  },
  "hooks": {
    "afterActivation": "console.log('Vuex plugin activated successfully')"
  }
}